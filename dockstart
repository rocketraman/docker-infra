#!/bin/bash
#
# Manages the lifecycle of a docker container on behalf of a process
# control mechanism such as supervisord. This is necessary because
# the docker client does not pass signals via the daemon to the
# running container, when those signals are not sent from the
# terminal. This script is necessary as of Docker version 0.8.0.
#
# See: https://groups.google.com/d/topic/docker-user/bC0mabJXmJ0/discussion
# See: https://github.com/dotcloud/docker/issues/1311
#
# This script should be started as follows:
#   dockstart <container>
#
# A TERM, INT, or QUIT signal received by the wrapper will be translated to a
# "docker stop" command rather than being forwarded directly to the docker
# client process.
#
# A HUP signal received by the wrapper will be translated to a
# "docker restart" command.
#
# If the wrapper script is force killed, the underlying container will
# continue to run.

PROGNAME=$(basename "$0")
DOCKERCMD=/usr/bin/docker
CONTAINER_ID=$1
SELFPID=$$
WAITPID=0
STOPPINGPID=0
RESTARTPID=0
STOPWAIT=${2:-10}

log() {
  echo "[${PROGNAME}] $1"
}

receivedsignal() {
  log "Received signal $1, $2 container ${CONTAINER_ID}..."
  return
}

startcontainer() {
  log "Starting docker container ${CONTAINER_ID}..."
  # start in the background so we can trap signals
  $DOCKERCMD start -a -i $CONTAINER_ID < /dev/stdin &
  WAITPID=$!
}

stopcontainer() {
  receivedsignal $1 "stopping"
  $DOCKERCMD stop -t $STOPWAIT $CONTAINER_ID > /dev/null &
  STOPPINGPID=$!
}

restartcontainer() {
  receivedsignal $1 "restarting"
  # Restart will cause the current docker client process to exit so
  # we need to re-attach and update WAITPID. Unfortunately some logs
  # may be lost here since the attach happens only after the restart.
  # Is there a better way?
  $DOCKERCMD restart -t $STOPWAIT $CONTAINER_ID > /dev/null &
  RESTARTPID=$!
}

reattachcontainer() {
  # Attach completes immediately if not connected to stdin
  $DOCKERCMD attach $CONTAINER_ID < /dev/stdin &
  WAITPID=$!
}

# http://stackoverflow.com/a/2183063/430128
trapsig() {
  func="$1"; shift
  for sig ; do
    trap "$func $sig" "$sig"
  done
}

trapsig stopcontainer INT TERM QUIT
trapsig restartcontainer HUP

log "Starting wrapper (pid $SELFPID)"
startcontainer

result=0
while [[ $WAITPID != 0 ]]; do
  log "waitloop: Container ${CONTAINER_ID} pid is now ${WAITPID}, monitoring container process..."
  wait $WAITPID
  result=$?
  if [[ $RESTARTPID != 0 ]]; then
    log "waitloop: Container ${CONTAINER_ID} exited with code $result and is restarting..."
    wait $RESTARTPID
    RESTARTPID=0
    reattachcontainer
  elif [[ $STOPPINGPID != 0 ]]; then
    log "waitloop: Container ${CONTAINER_ID} exited with code ${result}, stop is pending..."
    wait $STOPPINGPID
    WAITPID=0
  else
    log "waitloop: Container ${CONTAINER_ID} exited with code $result"
    WAITPID=0
  fi
  sleep 1
done

exit $result
